function [P,dPdx,dPdy]=polininterp2d(x, y, deg, deriv_bool)
% Polynomial expansion of given degree and its derivatives
if size(x,2) > size(x,1)
    x=x';   y=y';
end
if nargin < 4
    deriv_bool=0;
end
C1 = ones (length(x),1);  %Column of Ones
C0 = zeros(length(x),1);  %Column of Zeros
switch deg
    case 1
        P=[...
            C1 , ...
            x  ,y];
        if deriv_bool
            dPdx=[...
                C0     , ...
                C1     , C0];
            dPdy=[...
                C0     , ...
                C0     , C1];
        end
    case 2
        P=[...
            C1  , ...
            x   , y   ,...
            x.*x, x.*y,  y.*y];
        if deriv_bool
            dPdx=[...
                C0     , ...
                C1     , C0      , ...
                2*x    , y       , C0];
            dPdy=[...
                C0     , ...
                C0     , C1      , ...
                C0     , x       , 2*y];
        end
    case 3
        X2=x.*x;  XY=x.*y; Y2=y.*y;
        P=[...
            C1     , ...
            x      , y     ,...
            X2     , XY    , Y2     ,...
            X2.*x  , X2.*y , x.*Y2  , y.*Y2];
        if deriv_bool
            dPdx=[...
                C0     , ...
                C1     , C0      , ...
                2*x    , y       , C0       , ...
                3*X2   , 2*x.*y  , Y2       , C0];
            dPdy=[...
                C0     , ...
                C0     , C1      , ...
                C0     , x       , 2*y      , ...
                C0     , X2      , 2*x.*y   , 3*Y2];
        end
    case 4
        X2=x.*x;  XY=x.*y;   Y2=y.*y;
        X3=X2.*x; X2Y=X2.*y; XY2=x.*Y2; Y3=y.*Y2;
        P=[...
            C1     , ...
            x      , y     ,...
            X2     , XY    , Y2     ,...
            X3     , X2Y   , XY2    , Y3  ,...
            X3.*x  , X3.*y , X2.*Y2 , x.*Y3  , Y3.*y];
        if deriv_bool
            dPdx=[...
                C0     , ...
                C1     , C0      , ...
                2*x    , y       , C0       , ...
                3*X2   , 2*x.*y  , Y2       , C0      , ...
                4*X3   , 3*X2.*y , 2*x.*Y2  , Y3      , C0    ];
            dPdy=[...
                C0     , ...
                C0     , C1      , ...
                C0     , x       , 2*y      , ...
                C0     , X2      , 2*x.*y   , 3*Y2    , ...
                C0     , X3      , 2*X2.*y  , 3*x.*Y2 , 4*Y3];
         end
    case 5
        X2=x.*x;   XY =x.*y;  Y2  =y.*y;
        X3=X2.*x;  X2Y=X2.*y; XY2 =x.*Y2;   Y3 =y.*Y2;
        X4=X2.*X2; X3Y=X3.*y; X2Y2=X2.*Y2;  XY3=x.*Y3; Y4=Y3.*y;
        P=[...
            C1     , ...
            x      , y     ,...
            X2     , XY    , Y2     ,...
            X3     , X2Y   , XY2    , Y3     ,...
            X4     , X3Y   , X2Y2   , XY3    , Y4     ,...
            X4.*x  , X4.*y , X3.*Y2 , X2.*Y3 , x.*Y4  , Y4.*y];
        if deriv_bool
            dPdx=[...
                C0     , ...
                C1     , C0      , ...
                2*x    , y       , C0       , ...
                3*X2   , 2*x.*y  , Y2       , C0      , ...
                4*X3   , 3*X2.*y , 2*x.*Y2  , Y3      , C0    , ...
                5*X4   , 4*X3.*y , 3*X2.*Y2 , 2*x.*Y3 , Y4    , C0 ];
            dPdy=[...
                C0     , ...
                C0     , C1      , ...
                C0     , x       , 2*y      , ...
                C0     , X2      , 2*x.*y   , 3*Y2     , ...
                C0     , X3      , 2*X2.*y  , 3*x.*Y2  , 4*Y3    , ...
                C0     , X4      , 2*X3.*y  , 3*X2.*Y2 , 4*x.*Y3 , 5*Y4];
         end
    otherwise
        err(['Degree' num2str(deg) ' not implemented in polininterp2d']);
end